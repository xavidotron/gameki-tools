#!/usr/bin/python

import subprocess, sys, os, glob
import argparse

parser = argparse.ArgumentParser(epilog=
"""Examples:
  %(prog)s Dir/file.tex
  %(prog)s listchar-cJamesBond
  %(prog)s listchar-2-cJamesBond
  %(prog)s -l [-j cJamesBond] Gameki/Mail/casting.tex""",
                                 formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('target', nargs='+', help="files or option-macros to prod")
parser.add_argument('--single', '-s', action='store_true', help="use single-siding (don't put a blank page after sheets to make the page count even)")
parser.add_argument('--color', '-c', action='store_true', help="use color (\PDFPart) mode: single-siding and set background colors")
parser.add_argument('--run', '-r', help="prod a file using the given run instead of the default")
parser.add_argument('--lualatex', '-l', action="store_true", help="use lualatex instead of pdflatex")
parser.add_argument('--text', '-t', action="store_true", help="use lualatex and cat the text output (from Gameki/lib/text.sty)")
parser.add_argument('--xelatex', '-x', action="store_true", help="use xelatex instead of pdflatex")
parser.add_argument('--jobname', '-j', help="pass JOBNAME as the jobname to the latex file")
parser.add_argument('--outdir', '-o', help="directory for all output files to go to")
parser.add_argument('--pdfdest', '-p', help="copy pdf to this location on successful production")

args = parser.parse_args()

reldir = ""
updir = ""
if not os.path.exists("LaTeX"):
    updir = os.path.basename(os.getcwd())
    reldir = ".."
    while not os.path.exists(os.path.join(reldir, "LaTeX")):
	updir = os.path.join(os.path.basename(os.path.abspath(reldir)), updir)
	reldir = os.path.join("..", reldir)
	if os.path.abspath(reldir) == "/":
	    print >>sys.stderr, "No LaTeX directiory found; are you in a GameTeX directory?"
	    sys.exit(1)

dir = os.path.abspath(reldir)

# Not all versions of latexmk support the -lualatex flag directly.
lualatex = "-pdflatex=lualatex %O %S"

flags = ["-pdf"]
tex = "prod"

if args.single:
    tex = "single"
if args.color:
    tex = "color"

if args.lualatex or args.text:
    flags.append(lualatex)
if args.xelatex:
    flags.append("-xelatex")

clses = glob.glob(os.path.join(dir, 'LaTeX', '*.cls'))
assert len(clses) == 1, clses
gameclassname = os.path.basename(clses[0]).split('.', 1)[0]
env = {
    "TEXINPUTS": "%s/LaTeX/:%s/Gameki/lib/:" % (dir, dir),
    "gameclassname": gameclassname,
    gameclassname: dir,
    "PATH": os.environ["PATH"],
    "USER": os.environ["USER"],
}

filejobs = []
for t in args.target:
    if '-' in t and '.' not in t:
        # If the arg has a dash and no dot, then it's a jobname to pass to
        # Gameki/LaTeX/prod.tex.
        filejobs.append((os.path.join(dir, 'Gameki', 'lib', tex + '.tex'), t))
    else:
        filejobs.append((t, args.jobname))

outdir = args.outdir
if not outdir:
    outdir = "Out"
    if reldir:
	outdir = os.path.join(reldir, outdir)

products = []
for f,j in filejobs:
    if args.run:
        jn = run + ":" + f.split('.', 1)[0]
	if j:
	    jn += ":" + j
	flags.append("-jobname=" + jn)
        f = os.path.join(dir, "Gameki", "lib", "file.tex")
	od = os.path.join(outdir, os.path.basename(f.split('.', 1)[0]))
        os.makedirs(os.path.dirname(os.path.join(od, jn)))
    elif j:
	flags.append("-jobname=" + j)
	jn = j
        # If we reimplement in python, we could use os.path.relpath()
	od = os.path.join(outdir, os.path.basename(f.split('.', 1)[0]))
    else:
	jn = os.path.basename(f.split('.', 1)[0])
	od = os.path.join(outdir, updir, os.path.dirname(f))
    try:
        os.makedirs(od)
    except OSError:
        pass
    flags = ["-outdir=" + od] + flags

    product = os.path.join(od, jn + ".pdf")
    # NOTE(xavid): setting outdir leads to an unnecessary extra pass when
    #              the .aux file didn't already exist. We could theoretically
    #              try to fix this.
    try:
        subprocess.check_call(
            ["latexmk", "-halt-on-error", "-interaction=nonstopmode"]
            + flags + [f], stdout=sys.stderr, stdin=subprocess.PIPE, env=env)
    except:
        if os.path.exists(product):
            os.remove(product)
        raise
    else:
        products.append(product)
	if args.pdfdest:
            os.copy(product, args.pdfdest)
            if args.pdfdest.endswith('/'):
                dest = os.path.join(pdfdest, os.basename(jn + ".pdf"))
            else:
                dest = args.pdfdest
            print >>sys.stderr, "Copied to", dest

if len(products) > 1:
    print >>sys.stderr, "Finished prodding:", ', '.join(
        products)

if args.text:
    print open(os.path.join(od, jn + ".txt")).read(),
