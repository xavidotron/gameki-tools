#!/bin/bash

set -e

function usage {
    cat >&2 <<EOF
Usage:
  $0 [-l|-t] [-j JOBNAME] [-o OUTDIR] PATH.tex [PATH.tex...]
  $0 [-o OUTDIR] OPTION-MACRO

Examples:
  $0 Dir/file.tex
  $0 listchar-cJamesBond
  $0 -l [-j cJamesBond] Gameki/Mail/casting.tex

Options:
  -s: use single-siding (don't put a blank page after sheets to make the page
      count even)
  -c: use color (\PDFPart) mode: single-siding and set background colors
  -l: use lualatex instead of pdflatex
  -t: use lualatex and cat the text output (from Gameki/lib/text.sty)
  -x: use xelatex instead of pdflatex
  -j JOBNAME: pass JOBNAME as the jobname to the latex file
  -o OUTDIR: directory for output to go to
EOF
}

reldir=""
updir=""
if ! [ -d "LaTeX" ] ; then
    updir="$(basename "$(pwd)")/"
    reldir="../"
    while ! [ -d "$reldir/LaTeX" ] ; do
	updir="$(cd "$reldir" && basename "$(pwd)")/$updir"
	reldir="../$reldir"
	if [ "$(cd "$reldir" && pwd)" == "/" ]; then
	    echo "No LaTeX directiory found; are you in a GameTeX directory?" >&2
	    exit 1
	fi
    done
fi

dir="$(cd "$reldir" && pwd)"

# Not all versions of latexmk support the -lualatex flag directly.
lualatex="-pdflatex=lualatex %O %S"

flags=("-pdf")
extra=""
cat_after=""
tex="prod"
while getopts "scltxj:o:" optchar ; do
  case "${optchar}" in
      s)
	  tex="single"
	  ;;
      c)
	  tex="color"
	  ;;
      l)
	  flags=("${flags[@]}" "$lualatex")
	  ;;
      t)
	  flags=("${flags[@]}" "$lualatex")
	  cat_after="true"
	  ;;
      x)
	  flags=("${flags[@]}" "-xelatex")
	  ;;
      j)
	  jobname="$OPTARG"
	  ;;
      o)
	  outdir="$OPTARG"
	  ;;
      \?)
	  usage
	  exit 1
	  ;;
  esac
done
shift $((OPTIND-1))

if [ $# -le 0 ] ; then
    usage
    exit 1
fi

export TEXINPUTS="$dir/LaTeX/:$dir/Gameki/lib/:"
export gameclassname="$(basename "$dir"/LaTeX/*.cls | cut -d . -f 1)"
export "${gameclassname}"="$dir"

if echo "$1" | egrep -q '^[^.]+-[^.]+$' ; then
    # If the arg has a dash and no dot, then it's a jobname to pass to
    # Gameki/LaTeX/prod.tex.
    jobname="$1"
    shift
    set "$dir/Gameki/lib/$tex.tex"
fi

for f in "$@" ; do

    if [ -z "$outdir" ] ; then
	outdir="Out"
	if [ -n "$reldir" ] ; then
	    outdir="$reldir$outdir"
	fi
    fi
    if [ -n "$jobname" ] ; then
	flags=("${flags[@]}" "-jobname=$jobname")
        # If we reimplement in python, we could use os.path.relpath()
	outdir="$outdir/$(basename "$f" | cut -d . -f 1)"
    else
	outdir="$outdir/$updir$(dirname "$f")" 
    fi
    mkdir -p "$outdir"   
    flags=("-outdir=$outdir" "${flags[@]}")
    
    # NOTE(xavid): setting outdir leads to an unnecessary extra pass when
    #              the .aux file didn't already exist. We could theoretically
    #              try to fix this.
    if latexmk -halt-on-error -interaction=nonstopmode "${flags[@]}" "$f" >&2 </dev/null ; then
	:
    else
	status="$?"
	# Clean any old or partial .pdf file, so latexmk doesn't get confused.
	if [ -z "$jobname" ] ; then
	    jobname="$(basename "$1" | cut -d . -f 1)"
	fi
	rm -f "$outdir/$jobname.pdf"
	exit "$status"
    fi
done

if [ $# -ge 2 ] ; then
  echo "Finished prodding all files:" "$@" >&2
fi

if [ "$cat_after" ] ; then
    if [ -z "$jobname" ] ; then
	jobname="$(basename "$1" | cut -d . -f 1)"
    fi
    cat "$outdir/$jobname.txt"
fi
